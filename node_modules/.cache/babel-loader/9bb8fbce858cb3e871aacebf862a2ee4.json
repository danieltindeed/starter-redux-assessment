{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { selectSearchTerm } from '../search/search.slice';\nimport photos from './photos.data.js';\nconst initialState = {\n  photos\n};\nconst options = {\n  name: 'photos',\n  initialState,\n  reducers: {\n    // Task 1: Create an `addPhoto()` case reducer that adds a photo to state.photos.\n    // Task 1 Hint: You can use state.photos.unshift()\n    // `unshift()` documentation: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\n    // Task 6: Create an `removePhoto()` case reducer that removes a photo from state.photos\n    // Task 6 Hint: You can use state.photos.splice()\n    // `splice()` documentation: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\n    addPhoto: (state, _ref) => {\n      let {\n        payload: {\n          caption,\n          imageUrl\n        }\n      } = _ref;\n      state.photos.unshift({\n        id: state.photos.length + 1,\n        caption,\n        imageUrl\n      });\n    },\n    removePhoto: (state, action) => {\n      state.photos.splice(state.photos.findIndex(photo => photo.id === action.payload), 1);\n    }\n  }\n};\nconst photosSlice = createSlice(options);\nexport const {\n  addPhoto,\n  removePhoto\n} = photosSlice.actions;\nexport default photosSlice.reducer;\nexport const selectAllPhotos = state => state.photos.photos;\nexport const selectFilteredPhotos = state => {\n  // Task 12: Complete `selectFilteredPhotos()` selector to return a filtered list of photos whose captions match the user's search term\n  const photos = selectAllPhotos(state);\n  const searchTerm = selectSearchTerm(state);\n  return photos.filter(item => item.caption.toLowerCase().includes(searchTerm.toLowerCase()));\n};","map":{"version":3,"names":["createSlice","selectSearchTerm","photos","initialState","options","name","reducers","addPhoto","state","payload","caption","imageUrl","unshift","id","length","removePhoto","action","splice","findIndex","photo","photosSlice","actions","reducer","selectAllPhotos","selectFilteredPhotos","searchTerm","filter","item","toLowerCase","includes"],"sources":["/Users/danielt/Thinkful/starter-redux-assessment/src/features/photos/photos.slice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { selectSearchTerm } from '../search/search.slice';\nimport photos from './photos.data.js';\n\nconst initialState = {\n  photos,\n};\n\nconst options = {\n  name: 'photos',\n  initialState,\n  reducers: {\n    // Task 1: Create an `addPhoto()` case reducer that adds a photo to state.photos.\n    // Task 1 Hint: You can use state.photos.unshift()\n    // `unshift()` documentation: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\n\n    // Task 6: Create an `removePhoto()` case reducer that removes a photo from state.photos\n    // Task 6 Hint: You can use state.photos.splice()\n    // `splice()` documentation: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\n    addPhoto: (state, { payload: { caption, imageUrl } }) => {\n      state.photos.unshift({\n        id: state.photos.length + 1,\n        caption,\n        imageUrl,\n      });\n    },\n    removePhoto: (state, action) => {\n      state.photos.splice(\n        state.photos.findIndex((photo) => photo.id === action.payload),\n        1\n      );\n    },\n  },\n};\n\nconst photosSlice = createSlice(options);\n\nexport const { addPhoto, removePhoto } = photosSlice.actions;\n\nexport default photosSlice.reducer;\n\nexport const selectAllPhotos = (state) => state.photos.photos;\nexport const selectFilteredPhotos = (state) => {\n  // Task 12: Complete `selectFilteredPhotos()` selector to return a filtered list of photos whose captions match the user's search term\n  const photos = selectAllPhotos(state);\n  const searchTerm = selectSearchTerm(state);\n\n  return photos.filter((item) =>\n    item.caption.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n};\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAEA,MAAMC,YAAY,GAAG;EACnBD;AADmB,CAArB;AAIA,MAAME,OAAO,GAAG;EACdC,IAAI,EAAE,QADQ;EAEdF,YAFc;EAGdG,QAAQ,EAAE;IACR;IACA;IACA;IAEA;IACA;IACA;IACAC,QAAQ,EAAE,CAACC,KAAD,WAA+C;MAAA,IAAvC;QAAEC,OAAO,EAAE;UAAEC,OAAF;UAAWC;QAAX;MAAX,CAAuC;MACvDH,KAAK,CAACN,MAAN,CAAaU,OAAb,CAAqB;QACnBC,EAAE,EAAEL,KAAK,CAACN,MAAN,CAAaY,MAAb,GAAsB,CADP;QAEnBJ,OAFmB;QAGnBC;MAHmB,CAArB;IAKD,CAdO;IAeRI,WAAW,EAAE,CAACP,KAAD,EAAQQ,MAAR,KAAmB;MAC9BR,KAAK,CAACN,MAAN,CAAae,MAAb,CACET,KAAK,CAACN,MAAN,CAAagB,SAAb,CAAwBC,KAAD,IAAWA,KAAK,CAACN,EAAN,KAAaG,MAAM,CAACP,OAAtD,CADF,EAEE,CAFF;IAID;EApBO;AAHI,CAAhB;AA2BA,MAAMW,WAAW,GAAGpB,WAAW,CAACI,OAAD,CAA/B;AAEA,OAAO,MAAM;EAAEG,QAAF;EAAYQ;AAAZ,IAA4BK,WAAW,CAACC,OAA9C;AAEP,eAAeD,WAAW,CAACE,OAA3B;AAEA,OAAO,MAAMC,eAAe,GAAIf,KAAD,IAAWA,KAAK,CAACN,MAAN,CAAaA,MAAhD;AACP,OAAO,MAAMsB,oBAAoB,GAAIhB,KAAD,IAAW;EAC7C;EACA,MAAMN,MAAM,GAAGqB,eAAe,CAACf,KAAD,CAA9B;EACA,MAAMiB,UAAU,GAAGxB,gBAAgB,CAACO,KAAD,CAAnC;EAEA,OAAON,MAAM,CAACwB,MAAP,CAAeC,IAAD,IACnBA,IAAI,CAACjB,OAAL,CAAakB,WAAb,GAA2BC,QAA3B,CAAoCJ,UAAU,CAACG,WAAX,EAApC,CADK,CAAP;AAGD,CARM"},"metadata":{},"sourceType":"module"}